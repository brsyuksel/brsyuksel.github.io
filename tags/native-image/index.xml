<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>native-image on ybaroj | in code we trust</title>
    <link>https://brsyuksel.github.io/tags/native-image/</link>
    <description>Recent content in native-image on ybaroj | in code we trust</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>baris yuksel</copyright>
    <lastBuildDate>Fri, 28 Jan 2022 13:00:00 +0300</lastBuildDate><atom:link href="https://brsyuksel.github.io/tags/native-image/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>graalvm native image - load tests</title>
      <link>https://brsyuksel.github.io/posts/graalvm-native-load-tests/</link>
      <pubDate>Fri, 28 Jan 2022 13:00:00 +0300</pubDate>
      
      <guid>https://brsyuksel.github.io/posts/graalvm-native-load-tests/</guid>
      <description>xurl projesinin native image&amp;rsquo;ini olusturup calistirmayi basarmis, kucuk bir load test yapma ihtiyacindan bahsetmistik.
locust framework&amp;rsquo;u kullanarak minimal bir load test case&amp;rsquo;i hazirladim. locust, python ile gelistirilmis, yeterince guclu ve yetenekli, kolay erisilebilir, ucretsiz bir load test framework&amp;rsquo;u. diger secenekler ile kiyaslayip kendisiyle hizlica bir cozum uretebilecegimi dusunerek tercih ettim.
 locust&amp;rsquo;un distributed load generating gibi muhtesem yetenekleri var, olabilir. bizim paramiz yok. bu nedenle testleri local ortamda gerceklestirdik.
 test ortami testleri maalesef local ortamda gerceklestirdim.</description>
    </item>
    
    <item>
      <title>graalvm native build</title>
      <link>https://brsyuksel.github.io/posts/graalvm-native-image/</link>
      <pubDate>Wed, 26 Jan 2022 17:00:00 +0300</pubDate>
      
      <guid>https://brsyuksel.github.io/posts/graalvm-native-image/</guid>
      <description>uzun zamandir linux makinemde graalvm&amp;rsquo;i default jre/jdk olarak kullaniyorum, diger secenekleri yuklemeyi biraktim. graalvm performans katkisi, polyglot ozelligi 1 2 ve native image build secenekleriyle sadece jvm gelistiricileri icin degil ayni zamanda farkli env&amp;rsquo;lerde calisan arkadaslar icin de muthis bir secenek.
bu blog yazisinda diger ozelliklerini bir kenara birakip bir scala projesinin native build&amp;rsquo;ini almak uzerine biraz kafa yoracagiz.
 baslamadan soyleyelim, graalvm ile native build aldiginiz zaman uygulamanin icine oyle kocaman bir JVM koymuyor, o dediginiz electron.</description>
    </item>
    
  </channel>
</rss>
