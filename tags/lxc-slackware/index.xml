<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Lxc-Slackware on barış yüksel </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://brsyuksel.github.io/tags/lxc-slackware/index.xml/</link>
    <language>tr_TR</language>
    
    
    <updated>Mon, 01 Sep 2014 18:50:33 &#43;0200</updated>
    
    <item>
      <title>lxc</title>
      <link>http://brsyuksel.github.io/post/lxc/</link>
      <pubDate>Mon, 01 Sep 2014 18:50:33 &#43;0200</pubDate>
      
      <guid>http://brsyuksel.github.io/post/lxc/</guid>
      <description>

&lt;p&gt;lxc, açılımıyla &lt;em&gt;linux containers&lt;/em&gt;, linux sistemlerde kullanabileceğiniz bir başka virtualization uygulaması/method&amp;rsquo;udur. en öne çıkan yanı tam sanallaştırma yerine, bir init process&amp;rsquo;inin etrafında kurulu belirli process&amp;rsquo;lerin farklı bir kök dizini altında çalıştırılarak sanallaştırmanın gerçekleştirilmesidir. bunun yanında lxc, kernel&amp;rsquo;in cgroups, namespace, bridging, virtual lan gibi özelliklerden yararlandığı için chroot ile full-vm arasında bir noktada denilebilir. full-vm&amp;rsquo;ler gibi resource management uygulanabilir, device&amp;rsquo;lar paylaşılabilir. full-vm&amp;rsquo;lere oranla kurmak, yönetmek, yürütmek oldukça daha hızlı ve basittir.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;kernel ve kurulum&lt;/h1&gt;

&lt;p&gt;lxc&amp;rsquo;nin yeteneklerini tam anlamıyla kullanabilmeniz için kernel&amp;rsquo;in belirli bir şekilde derlenmiş olması gerekiyor. kernel derleme aşamasına gelmeden önce paket yöneticinizden lxc&amp;rsquo;yi kurun.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;slackware 14.1&lt;/strong&gt; tarafında, güncel repolarda bulunan lxc&amp;rsquo;nin sürümü 0.9.0, bu sürüm belirli özellikleri barındırmıyor olduğu gibi slackware template&amp;rsquo;i de içermiyor, bu nedenle slackbuilds ekibinin düzenlediği sürümü kurun. bu sürüm ise 1.0.3 olup slackware template&amp;rsquo;i içeriyor. yalnız slackware template&amp;rsquo;nin düzgün çalışabilmesi için patch&amp;rsquo;lenmiş bir slackpkg&amp;rsquo;e ihtiyaç duyacaksınız ( slackpkg&amp;rsquo;in kodlarını inceleyince fark edersiniz ), bu da yine aynı ekip tarafından patch&amp;rsquo;lenmiş. &lt;a href=&#34;http://ponce.cc/slackware/testing/lxc/&#34;&gt;lxc-1.0.3 slackbuild&lt;/a&gt;, &lt;a href=&#34;http://ponce.cc/slackware/utilities/&#34;&gt;patched slackpkg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;kurulumu gerçekleştirdikten sonra şu komut ile kernel durumunuzu kontrol edebilirsiniz: &lt;code&gt;lxc-checkconfig&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;çıktıda &amp;ldquo;missing&amp;rdquo; şeklinde bir sonuç alırsanız, bu desteği sağlayacak şekilde yeniden kernel derlemeniz gerekiyor. kernel&amp;rsquo;i lxc için uygun olacak şekilde nasıl derleyeceğiniz hakkında bilgi man sayfasında mevcut: &lt;code&gt;man lxc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;kernel derleme işleminde configuration&amp;rsquo;ı tamamladıktan sonra &lt;code&gt;CONFIG=.config lxc-checkconfig&lt;/code&gt; komutuyla yeni configuration&amp;rsquo;ın eksik olup olmadığını kontrol ederek derleme işleminize geçebilirsiniz.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;container &lt;em&gt;(vm)&lt;/em&gt; oluşturma&lt;/h1&gt;

&lt;p&gt;lxc ile container oluşturulurken, &lt;em&gt;(slackware için &lt;code&gt;/usr/share/lxc/templates/&lt;/code&gt; klasörü altında yer alan)&lt;/em&gt; template scriptleri kullanılıyor. bu template scriptleri, dağıtıma göre &lt;strong&gt;lxc-DISTRONAME&lt;/strong&gt; adını taşıyan bash scriptler ve container oluşturulma anında genel olarak, dağıtımınızla benzer kök dizin hiyerarşisini oluşturuyor, container&amp;rsquo;ın çalışması için gerekli paketleri indirip kuruyor, lxc configuration&amp;rsquo;ını sağlanıyor. &lt;strong&gt;burda dikkat etmeniz gereken, host olarak kullandığınız dağıtımla container olarak kullanacağınız dağıtımın aynı olması.&lt;/strong&gt; &lt;em&gt;incelediğim kadarıyla, template&amp;rsquo;lerin içerisinde host dağıtımdan bağımsız şekilde çalışabilecek bir template yok. aslında yapılabilir bir olay ancak lxc&amp;rsquo;i vakitten tasarruf etmek için kullandığımızı unutmamak lazım :)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;hızlıca şu komutla bir container oluşturabilirsiniz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo lxc-create -t slackware -n deneme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bu komut sonrası bahsettiğim işlemler yürütülecek ve daha sonra container için gerekli paketler dağıtımın paket yöneticisi tarafından, container&amp;rsquo;ın kök dizini altına yüklecek ve &lt;strong&gt;deneme&lt;/strong&gt; adında ilk container&amp;rsquo;ımız hazırlanmış olacak. container oluşturma işlemi fazla zamanınızı almayacaktır.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;yürütme, durdurma, console&lt;/h1&gt;

&lt;p&gt;oluşturduğumuz container&amp;rsquo;ı yürütmek için:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo lxc-start -n deneme -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ps aux&lt;/code&gt; çıktısına baktığınızda yeni bir &lt;strong&gt;init/systemd&lt;/strong&gt; process&amp;rsquo;i görüyor olmalısınız. bahsettiğim gibi yeni bir init process&amp;rsquo;i farklı bir kök dizin altında çalışmaya başladı. şimdi bu container&amp;rsquo;ın &lt;strong&gt;console&lt;/strong&gt;&amp;lsquo;una bağlanalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo lxc-console -n deneme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;login uygulaması ile karşılaşacaksınız. genel olarak &lt;strong&gt;kullanıcı: root, şifre: root&lt;/strong&gt;. bu noktadan sonra container&amp;rsquo;ınızı dilediğiniz gibi kullanabilirsiniz. &lt;strong&gt;bu console&amp;rsquo;dan çıkmak için ctrl+a kombinasyonundan sonra q tuşuna basın.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;container&amp;rsquo;ı &lt;strong&gt;durdurmak için&lt;/strong&gt; container console&amp;rsquo;da &lt;code&gt;poweroff&lt;/code&gt; komutunu verebilirsiniz, ya da host terminal&amp;rsquo;inden:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo lxc-stop -n deneme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;komutu ile container&amp;rsquo;ı durdurabilirsiniz. bazı durumlarda bu şekilde durdurmak başarısız olabiliyor, bu nedenle &lt;strong&gt;-k&lt;/strong&gt; parametresi ekleyerek container process&amp;rsquo;lerinin &lt;strong&gt;kill&lt;/strong&gt; edilerek durdurulmasını sağlayabilirsiniz.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;freeze, unfreeze&lt;/h1&gt;

&lt;p&gt;container&amp;rsquo;ları kullanmadığınız, işlem yapmadığınız durumlarda &lt;strong&gt;freeze&lt;/strong&gt; ederek &lt;em&gt;( SIGSTOP gibi )&lt;/em&gt;, host tarafında işlem yükünü azaltabilirsiniz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo lxc-freeze -n deneme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;freeze edilmiş bir container&amp;rsquo;ı tekrar yürütmek için &lt;em&gt;( SIGCONT )&lt;/em&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo lxc-unfreeze -n deneme
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;dosya paylaşımı&lt;/h1&gt;

&lt;p&gt;lxc&amp;rsquo;de dosya paylaşımı diğer vm method&amp;rsquo;larına göre çok daha kolay. eğer container&amp;rsquo;ınız için logical volume kullanmıyorsanız, lxc rootfs&amp;rsquo;ine host üzerinden erişiminiz mümkün. &lt;strong&gt;genel lxc configuration&amp;rsquo;ı için&lt;/strong&gt;, bu yol şu şekilde: &lt;code&gt;/var/lib/lxc/deneme/rootfs/&lt;/code&gt; . bu dizin altına girdiğinizde kök dizin yapısıyla karşılaşacaksınız. dosya paylaşımlarını bu şekilde gerçekleştirebilirsiniz. bu klasöre kolayca erişmek istediğiniz zaman şu komut işinizi görecektir:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;su -
cd /proc/$(lxc-info -n deneme -p -H)/root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;daha güzel bir yöntem ise container configuration&amp;rsquo;ından yararlanmak. lxc ile host tarafındaki bir klasörün container tarafından &lt;strong&gt;bind-mount&lt;/strong&gt; edilmesini sağlayabiliyoruz. bunu ister &lt;strong&gt;lxc container config&lt;/strong&gt; dosyasından, isterseniz de &lt;strong&gt;container&amp;rsquo;ın fstab dosyası&lt;/strong&gt; aracılığıyla gerçekleştirebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;container fstab&lt;/strong&gt; dosyası &lt;code&gt;/var/lib/lxc/deneme/rootfs/etc/fstab&lt;/code&gt; için örnek olarak şu girdiyi ekleyin:&lt;/p&gt;

&lt;p&gt;/host/uzerindeki/klasor container/uzerinde/yol none bind,create=dir 0 0&lt;/p&gt;

&lt;p&gt;ya da &lt;strong&gt;lxc container config&lt;/strong&gt; dosyası &lt;code&gt;/var/lib/lxc/deneme/config&lt;/code&gt; için şöyle bir ekleme yapabilirsiniz:&lt;/p&gt;

&lt;p&gt;lxc.mount.entry = /host/uzerindeki/klasor container/uzerinde/yol none bind.create=dir 0.0&lt;/p&gt;

&lt;p&gt;bu iki işlemden birini gerçekleştirdikten sonra container&amp;rsquo;ınızı &lt;strong&gt;reboot&lt;/strong&gt; edin, belirlediğiniz klasör container üzerinde mount edilmiş olacaktır.&lt;/p&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;network&lt;/h1&gt;

&lt;p&gt;öncelikle sisteminizde &lt;strong&gt;bridge-utils, dnsmasq, iptables&lt;/strong&gt; paketleri kurulu olmalı. paket yöneticiniz aracılığıyla bu paketleri kurun.&lt;/p&gt;

&lt;p&gt;ilk aşamada &lt;strong&gt;container config dosyasında&lt;/strong&gt; bir kaç ekleme yapmamız gerekiyor.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/var/lib/lxc/deneme/config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;lxc.network.type = veth
  lxc.network.hwaddr = 00:16:3e:3a:f1:c1
  lxc.network.flags = up
  lxc.network.link = br0
  lxc.network.name = eth0&lt;/p&gt;

&lt;p&gt;bu configuration ile &lt;strong&gt;type&lt;/strong&gt; satırında lxc&amp;rsquo;ye veth tunnel device kullanacağımızı bildiriyoruz. &lt;strong&gt;hwaddr&lt;/strong&gt; satırı container&amp;rsquo; için oluşturulacak device&amp;rsquo;ın mac adresi. &lt;strong&gt;flags&lt;/strong&gt; satırında device&amp;rsquo;ı up ediyoruz. &lt;strong&gt;link&lt;/strong&gt; satırında ise host tarafında var olan device&amp;rsquo;a tunnel yapıyoruz ve &lt;strong&gt;name&lt;/strong&gt; satırında container&amp;rsquo;ın virtual device&amp;rsquo;ının ismini belirliyoruz.&lt;/p&gt;

&lt;p&gt;sıradaki işlem bir &lt;strong&gt;bridge device oluşturma.&lt;/strong&gt; bunun için şu komutları uygulayabilirsiniz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;su -
brctl addbr br0
brctl setfd br0 0
ifconfig br0 192.168.100.1 netmask 255.255.255.0 promisc up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bu aşamada &lt;strong&gt;br0&lt;/strong&gt; bridge-device oluşturulmuş ve &lt;strong&gt;192.168.100.1 ip adresi ile&lt;/strong&gt; up edilmiş olacaktır. kernel variable&amp;rsquo;larında &lt;strong&gt;ip_forward&lt;/strong&gt; ve &lt;strong&gt;br0 için proxy_arp&lt;/strong&gt;&amp;lsquo;ı açmamız gerekiyor, şu şekilde devam edin:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward
echo 1 &amp;gt; /proc/sys/net/ipv4/conf/br0/proxy_arp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ve daha sonra, host sistemde &lt;strong&gt;nat tablosuna bir trafik yönlendirmesi kayıdı&lt;/strong&gt; eklememiz gerekiyor &lt;em&gt;(ben bu örnekte internet erişimim wlan0 device&amp;rsquo;ından gerçekleştiği için out device olarak wlan0 kullandım, siz durumuna göre gerekli değişikliği yapmalısınız)&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;internet erişimi olan bir container&amp;rsquo;a sahip olmamız için son aşama, bu container&amp;rsquo;lara &lt;strong&gt;ip adresi atayacak bir dhcp server&lt;/strong&gt;&amp;lsquo;a ihtiyacımız var, bunun için &lt;strong&gt;dnsmasq&lt;/strong&gt;&amp;lsquo;ı kullanıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dnsmasq&amp;rsquo;ın global configuration dosyasını&lt;/strong&gt; &lt;code&gt;/etc/dnsmasq.conf&lt;/code&gt; açın ve şu satırı ekleyin:&lt;/p&gt;

&lt;p&gt;conf-dir=/etc/dnsmasq.d&lt;/p&gt;

&lt;p&gt;şimdi &lt;code&gt;/etc/dnsmasq.d&lt;/code&gt; klasörü altına gidin ( yoksa oluşturun ) ve &lt;strong&gt;br0.conf&lt;/strong&gt; adında bir dosya oluşturarak &lt;em&gt;(dosya ismi önemli değil)&lt;/em&gt; şu eklemeleri yapın:&lt;/p&gt;

&lt;p&gt;interface=br0
  dhcp-range=192.168.100.2,192.168.100.254,72h&lt;/p&gt;

&lt;p&gt;kaydettikten sonra &lt;strong&gt;dnsmasq&amp;rsquo;ı başlatın&lt;/strong&gt;. dnsmasq, container device&amp;rsquo;larımıza 192.168.100.2-192.168.100.254 arasında bir ip atayacak.&lt;/p&gt;

&lt;p&gt;şimdi: &lt;code&gt;sudo lxc-start -n deneme -d&lt;/code&gt; :)&lt;/p&gt;

&lt;p&gt;lxc için veth dışında farklı network yöntemleri mevcut, bunun için man sayfasından yararlanabilirsiniz.&lt;/p&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;daha fazlası&lt;/h1&gt;

&lt;p&gt;lxc maintainer&amp;rsquo;larından stephane graber&amp;rsquo;in blogunda &lt;a href=&#34;https://www.stgraber.org/2013/12/20/lxc-1-0-blog-post-series/&#34;&gt;güzel bir yazı dizisi&lt;/a&gt; var, okumanızı öneririm. autostart, network, storage, arch, hooks, security, namespaces, unprivilaged containers ve scripting yazılarına kesinlikle bakın derim.&lt;/p&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;öneri&lt;/h1&gt;

&lt;p&gt;ilk olarak, daha önce virtualization işlemleri için libvirt ile tanışmış arkadaşlar için söylüyorum, libvirt güncel olarak lxc&amp;rsquo;i desteklemektedir. libvirt&amp;rsquo;in ilgili paketlerini kurarak libvirt ve virsh aracılığıyla container&amp;rsquo;larınızı yönetebilirsiniz.&lt;/p&gt;

&lt;p&gt;lxc&amp;rsquo;i daha basit ve hızlı bir şekilde kullanabilmek, container&amp;rsquo;ları yönetmek (ve daha fazlasını) istiyorsanız son derece popüler olan &lt;a href=&#34;http://docker.io&#34;&gt;docker.io&amp;rsquo;ya&lt;/a&gt; kesinlikle bakmalısınız. sitesinde hızlıca erişebileceğiniz bir &amp;ldquo;try it&amp;rdquo; online uygulaması mevcut, docker&amp;rsquo;ın yeteneklerini keşfetmeniz için yeterli olacaktır. bir çok dağıtım ve küçük linux vm&amp;rsquo;leri üzerinde çalışmak koşuluyla mac os ve windows platformları için kurulum guide&amp;rsquo;ları mevcut.&lt;/p&gt;

&lt;p&gt;full-vm aracılığıyla docker ve dolayısıyla lxc&amp;rsquo;i kullanabileceğiniz başka bir platform &lt;a href=&#34;https://coreos.com/&#34;&gt;coreos linux&lt;/a&gt;. kendisi küçük bir dağıtım olup distributed sistemlerde kolaylıkla yapılandırabileceğiniz araçlarla geliyor. incelemekte fayda var.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>